// This file is a simplified version of Bootstrap 5 Utilities (https://v5.getbootstrap.com/docs/5.0/utilities/), Licensed under MIT License
// Mostly just text, spacing, font and block/visibility utilities are available.

$utilities: (
  "clear": (
    property: clear,
    values: left right both none,
  ),
  "align": (
    property: vertical-align,
    class: align,
    values: baseline top middle bottom text-bottom text-top,
  ),
  "float": (
    responsive: true,
    property: float,
    values: left right none,
  ),
  "display": (
    responsive: true,
    print: true,
    property: display,
    class: d,
    values: inline inline-block block none,
  ),
  // Margin utilities
  "margin": (
      responsive: true,
      property: margin,
      class: m,
      values:
        map-merge(
          $spacers,
          (
            auto: auto,
          )
        ),
    ),
  "margin-x": (
    responsive: true,
    property: margin-right margin-left,
    class: mx,
    values:
      map-merge(
        $spacers,
        (
          auto: auto,
        )
      ),
  ),
  "margin-y": (
    responsive: true,
    property: margin-top margin-bottom,
    class: my,
    values:
      map-merge(
        $spacers,
        (
          auto: auto,
        )
      ),
  ),
  "margin-top": (
    responsive: true,
    property: margin-top,
    class: mt,
    values:
      map-merge(
        $spacers,
        (
          auto: auto,
        )
      ),
  ),
  "margin-right": (
    responsive: true,
    property: margin-right,
    class: mr,
    values:
      map-merge(
        $spacers,
        (
          auto: auto,
        )
      ),
  ),
  "margin-bottom": (
    responsive: true,
    property: margin-bottom,
    class: mb,
    values:
      map-merge(
        $spacers,
        (
          auto: auto,
        )
      ),
  ),
  "margin-left": (
    responsive: true,
    property: margin-left,
    class: ml,
    values:
      map-merge(
        $spacers,
        (
          auto: auto,
        )
      ),
  ),
  // Padding utilities
  "padding": (
    responsive: true,
    property: padding,
    class: p,
    values: $spacers,
  ),
  "padding-x": (
    responsive: true,
    property: padding-right padding-left,
    class: px,
    values: $spacers,
  ),
  "padding-y": (
    responsive: true,
    property: padding-top padding-bottom,
    class: py,
    values: $spacers,
  ),
  "padding-top": (
    responsive: true,
    property: padding-top,
    class: pt,
    values: $spacers,
  ),
  "padding-right": (
    responsive: true,
    property: padding-right,
    class: pr,
    values: $spacers,
  ),
  "padding-bottom": (
    responsive: true,
    property: padding-bottom,
    class: pb,
    values: $spacers,
  ),
  "padding-left": (
    responsive: true,
    property: padding-left,
    class: pl,
    values: $spacers,
  ),
  // Text
  "font-size": (
    rfs: true,
    property: font-size,
    class: fs,
    values: $font-sizes,
  ),
  "font-style": (
    property: font-style,
    class: fst,
    values: italic normal,
  ),
  "font-weight": (
    property: font-weight,
    class: fw,
    values: (
      light: light,
      lighter: lighter,
      normal: normal,
      bold: bold,
      bolder: bolder,
    ),
  ),
  "text-transform": (
    property: text-transform,
    class: text,
    values: lowercase uppercase capitalize,
  ),
  "text-align": (
    responsive: true,
    property: text-align,
    class: text,
    values: left right center,
  ),
  "text-decoration": (
    property: text-decoration,
    values: none underline line-through,
  ),
  "visibility": (
    property: visibility,
    class: null,
    values: (
      visible: visible,
      invisible: hidden,
    ),
  ),
);

@each $key, $utility in $utilities {
  $values: map-get($utility, values);

  // If the values are a list or string, convert it into a map
  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
    $values: zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map-get($utility, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if type-of($properties) == "string" {
      $properties: append((), $properties);
    }

    // Use custom class if present
    $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
    $property-class: if($property-class == null, "", $property-class);

    // Don't prefix if value key is null (eg. with shadow class)
    $property-class-modifier: if($key, if($property-class == "", "", "-") + $key, "");

    @if $value != null {
      .#{$property-class + $property-class-modifier} {
        @each $property in $properties {
          #{$property}: $value !important;
        }
      }
    }
  }
}
