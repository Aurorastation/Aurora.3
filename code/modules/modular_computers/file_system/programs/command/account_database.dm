#define FUND_CAP 1000000

/datum/computer_file/program/account_db
	filename = "accdb"
	filedesc = "Account Database"
	program_icon_state = "comm"
	extended_desc = "Access transaction logs, account data and all kinds of other financial records."
	requires_ntnet = TRUE
	available_on_ntnet = FALSE
	size = 4 // primarily cloud computing
	usage_flags = PROGRAM_CONSOLE
	color = LIGHT_COLOR_BLUE

	var/machine_id = ""
	var/datum/money_account/detailed_account_view
	var/creating_new_account = FALSE

/datum/computer_file/program/account_db/New()
	..()
	if(current_map)
		machine_id = "[station_name()] Acc. DB #[SSeconomy.num_financial_terminals++]"
	else
		machine_id = "NT-Net Relay Back-up Software DB" // created during map generation inside the ntnet relay, not used by players

/datum/computer_file/program/account_db/proc/get_held_card()
	var/obj/item/card/id/held_card
	if(computer.card_slot?.stored_card)
		held_card = computer.card_slot.stored_card
	return held_card

/datum/computer_file/program/account_db/proc/get_access_level()
	var/obj/item/card/id/held_card = get_held_card()
	if (!held_card)
		return 0
	if(access_cent_captain in held_card.access)
		return 2
	else if((access_hop in held_card.access) || (access_captain in held_card.access))
		return 1

/datum/computer_file/program/account_db/proc/create_transation(target, reason, amount)
	var/datum/transaction/T = new()
	T.target_name = target
	T.purpose = reason
	T.amount = amount
	T.date = worlddate2text()
	T.time = worldtime2text()
	T.source_terminal = machine_id
	return T

/datum/computer_file/program/account_db/proc/accounting_letterhead(report_name)
	var/obj/item/card/id/held_card = get_held_card()
	return {"
		<center><h1><b>[report_name]</b></h1></center>
		<center><small><i>[station_name()] Accounting Report</i></small></center>
		<hr>
		<u>Generated By:</u> [held_card.registered_name], [held_card.assignment]<br>
	"}

/datum/computer_file/program/account_db/ui_interact(mob/user)
	var/datum/vueui/ui = SSvueui.get_open_ui(user, src)
	if(!ui)
		ui = new /datum/vueui/modularcomputer(user, src, "mcomputer-command-accountdb", 400, 640, filedesc)
	ui.open()

/datum/computer_file/program/account_db/vueui_data_change(var/list/data, var/mob/user, var/datum/vueui/ui)
	. = ..()
	data = . || data || list()

	// Gather data for computer header
	var/headerdata = get_header_data(data["_PC"])
	if(headerdata)
		data["_PC"] = headerdata
		. = data

	var/obj/item/card/id/held_card = get_held_card()

	data["src"] = "\ref[src]"
	data["has_printer"] = !!computer.nano_printer
	data["id_inserted"] = !!held_card
	data["id_card"] = held_card ? text("[held_card.registered_name], [held_card.assignment]") : "-----"
	data["access_level"] = get_access_level()
	data["machine_id"] = machine_id
	data["creating_new_account"] = creating_new_account
	data["detailed_account_view"] = !!detailed_account_view
	data["station_account_number"] = SSeconomy.station_account.account_number
	data["transactions"] = null
	data["accounts"] = null

	if (detailed_account_view)
		data["account_number"] = detailed_account_view.account_number
		data["owner_name"] = detailed_account_view.owner_name
		data["money"] = detailed_account_view.money
		data["suspended"] = detailed_account_view.suspended

		var/list/trx = list()
		for(var/datum/transaction/T in detailed_account_view.transactions)
			trx.Add(list(list(\
				"date" = T.date, \
				"time" = T.time, \
				"target_name" = T.target_name, \
				"purpose" = T.purpose, \
				"amount" = T.amount, \
				"source_terminal" = T.source_terminal)))

		if(length(trx))
			data["transactions"] = trx

	var/list/accounts = list()
	for(var/M in SSeconomy.all_money_accounts)
		var/datum/money_account/D = SSeconomy.get_account(M)
		accounts.Add(list(list(\
			"account_number"=D.account_number,\
			"owner_name"=D.owner_name,\
			"suspended"=D.suspended ? "SUSPENDED" : "")))

	if(length(accounts))
		data["accounts"] = accounts

	return data

/datum/computer_file/program/account_db/Topic(href, href_list)
	if(..())
		return TRUE

	if(href_list["choice"])
		switch(href_list["choice"])
			if("create_account")
				creating_new_account = TRUE

			if("add_funds")
				var/amount = input("Enter the amount you wish to add", "Silently add funds") as num
				if(detailed_account_view)
					detailed_account_view.money = min(detailed_account_view.money + amount, FUND_CAP)

			if("remove_funds")
				var/amount = input("Enter the amount you wish to remove", "Silently remove funds") as num
				if(detailed_account_view)
					detailed_account_view.money = max(detailed_account_view.money - amount, -FUND_CAP)

			if("toggle_suspension")
				if(detailed_account_view)
					detailed_account_view.suspended = !detailed_account_view.suspended
					callHook("change_account_status", list(detailed_account_view))

			if("finalise_create_account")
				var/account_name = href_list["holder_name"]
				var/starting_funds = max(text2num(href_list["starting_funds"]), 0)

				starting_funds = Clamp(starting_funds, 0, SSeconomy.station_account.money)	// Not authorized to put the station in debt.
				starting_funds = min(starting_funds, FUND_CAP)								// Not authorized to give more than the fund cap.

				SSeconomy.create_account(account_name, starting_funds, src)
				if(starting_funds > 0)
					//subtract the money
					SSeconomy.station_account.money -= starting_funds

					//create a transaction log entry
					var/datum/transaction/trx = create_transation(account_name, "New account activation", "([starting_funds])")
					SSeconomy.add_transaction_log(SSeconomy.station_account,trx)
				creating_new_account = 0

			if("view_account_detail")
				detailed_account_view = SSeconomy.get_account(href_list["account_number"])

			if("view_accounts_list")
				detailed_account_view = null
				creating_new_account = 0

			if("revoke_payroll")
				var/funds = detailed_account_view.money
				var/account_trx = create_transation(SSeconomy.station_account.owner_name, "Revoke payroll", "([funds])")
				var/station_trx = create_transation(detailed_account_view.owner_name, "Revoke payroll", funds)

				SSeconomy.station_account.money += funds
				detailed_account_view.money = 0

				SSeconomy.add_transaction_log(detailed_account_view,account_trx)
				SSeconomy.add_transaction_log(SSeconomy.station_account,station_trx)

				callHook("revoke_payroll", list(detailed_account_view))

			if("print")
				var/text
				var/pname
				if (detailed_account_view)
					pname = "account #[detailed_account_view.account_number] details"
					var/title = "Account #[detailed_account_view.account_number] Details"
					text = {"
						[accounting_letterhead(title)]
						<u>Holder:</u> [detailed_account_view.owner_name]<br>
						<u>Balance:</u> [detailed_account_view.money]电<br>
						<u>Status:</u> [detailed_account_view.suspended ? "Suspended" : "Active"]<br>
						<u>Transactions:</u> ([detailed_account_view.transactions.len])<br>
						<table>
							<thead>
								<tr>
									<td>Timestamp</td>
									<td>Target</td>
									<td>Reason</td>
									<td>Value</td>
									<td>Terminal</td>
								</tr>
							</thead>
							<tbody>
						"}

					for (var/datum/transaction/T in detailed_account_view.transactions)
						text += {"
									<tr>
										<td>[T.date] [T.time]</td>
										<td>[T.target_name]</td>
										<td>[T.purpose]</td>
										<td>[T.amount]</td>
										<td>[T.source_terminal]</td>
									</tr>
							"}

					text += {"
							</tbody>
						</table>
						"}

				else
					pname = "financial account list"
					text = {"
						[accounting_letterhead("Financial Account List")]
						<table>
							<thead>
								<tr>
									<td>Account Number</td>
									<td>Holder</td>
									<td>Balance</td>
									<td>Status</td>
								</tr>
							</thead>
							<tbody>
					"}

					for(var/M in SSeconomy.all_money_accounts)
						var/datum/money_account/D = SSeconomy.get_account(M)
						text += {"
								<tr>
									<td>#[D.account_number]</td>
									<td>[D.owner_name]</td>
									<td>[D.money]电</td>
									<td>[D.suspended ? "Suspended" : "Active"]</td>
								</tr>
						"}

					text += {"
							</tbody>
						</table>
					"}

				computer.nano_printer.print_text(text, pname, "#deebff")

	SSvueui.check_uis_for_change(src)

#undef FUND_CAP